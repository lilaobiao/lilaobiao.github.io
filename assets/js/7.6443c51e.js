(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{167:function(e,t,n){"use strict";n.r(t);var s=n(0),r=Object(s.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),n("p",[e._v("具体配置可参考："),n("a",{attrs:{href:"https://github.com/vuejs/vue-cli/blob/ce3e2d475d63895cbb40f62425bb6b3237469bcd/docs/zh/config/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/vuejs/vue-cli/blob/ce3e2d475d63895cbb40f62425bb6b3237469bcd/docs/zh/config/README.md"),n("OutboundLink")],1)]),e._v(" "),e._m(10),e._v(" "),e._m(11),e._m(12),e._v(" "),n("p",[e._v("一般一个项目都会有以下 3 种环境：")]),e._v(" "),e._m(13),e._v(" "),n("p",[e._v("这就需要我们进行正确的环境配置和管理，我们可以在根目录下创建以下形式的文件进行不同环境下变量的配置：")]),e._v(" "),e._m(14),e._v(" "),n("p",[e._v(".env.[mode].local 会覆盖 .env.[mode] 下的相同配置。同理 .env.local 会覆盖 .env 下的相同配置。\n由此可以得出结论，相同配置项的权重：.env.[mode].local > .env.[mode] > .env.local > .env")]),e._v(" "),n("p",[e._v("比如我们创建一个名为 .env.stage 的文件，该文件表明其只在 stage 环境下被加载，在这个文件中，我们可以配置如下键值对的变量：")]),e._v(" "),e._m(15),n("p",[e._v("这时候我们怎么在 vue.config.js 中访问这些变量呢？很简单，使用 process.env.[name] 进行访问就可以了，比如：")]),e._v(" "),e._m(16),n("p",[e._v("当你运行 yarn serve 命令后会发现输出的是 development，因为 vue-cli-service serve 命令默认设置的环境是 development，你需要修改 package.json 中的 serve 脚本的命令为：")]),e._v(" "),e._m(17),n("p",[e._v("--mode stage 其实就是修改了 webpack 4 中的 mode 配置项为 stage，同时其会读取对应 .env.[model] 文件下的配置，如果没找到对应配置文件，其会使用默认环境 development，同样 vue-cli-service build 会使用默认环境 production。")]),e._v(" "),e._m(18),e._v(" "),e._m(19),n("p",[e._v("vue.config.js 中打印 process.env，终端输出：")]),e._v(" "),e._m(20),n("p",[e._v("但是我们在入口文件 main.js 中打印会发现输出：")]),e._v(" "),e._m(21),n("p",[e._v("可见注入时过滤调了非 VUE_APP_ 开头的变量，其中多出的 BASE_URL 为你在 vue.config.js 设置的值，默认为 /，其在环境配置文件中设置无效。\n本项目可通过 npm run serve-stage 查看效果。")]),e._v(" "),e._m(22),e._v(" "),e._m(23),n("p",[e._v("现在我们要在 vue.config.js 里注入这些变量，我们可以使用 chainWebpack 修改 DefinePlugin 中的值：")]),e._v(" "),e._m(24),n("p",[e._v("最后我们可以在客户端业务代码js中访问包含动态配置的对象：")]),e._v(" "),e._m(25),n("ol",{attrs:{start:"5"}},[n("li",[e._v("路由优化\n使用 require.ensure() 实现按需加载，只有访问到了该页面才会加载对应路由的内容 require.ensure 参考链接"),n("a",{attrs:{href:"https://webpack.js.org/api/module-methods/#require-ensure",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://webpack.js.org/api/module-methods/#require-ensure"),n("OutboundLink")],1)])]),e._v(" "),e._m(26),e._m(27),e._v(" "),e._m(28),n("p",[e._v("moduleA.js")]),e._v(" "),e._m(29),n("p",[e._v("index.js")]),e._v(" "),e._m(30),e._m(31),e._v(" "),e._m(32),n("p",[e._v("去掉extends里面的eslint项，如果代码不是热更新，需重新启动才生效")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"关于vue-cli3的项目配置和一些开发建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关于vue-cli3的项目配置和一些开发建议","aria-hidden":"true"}},[this._v("#")]),this._v(" 关于vue-cli3的项目配置和一些开发建议")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"环境依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#环境依赖","aria-hidden":"true"}},[this._v("#")]),this._v(" 环境依赖")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("要有node，webpack，全局安装最新的vue-cli cnpm install -g @vue/cli")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"创建项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建项目","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建项目")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("切换到需要创建项目的文件夹，执行命令 vue create xxx，选择相关配置项，直到项目初始完成")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("如果对通过命令创建不熟悉，可以通过命令 vue ui 打开视图面板，进行可视化的项目创建")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"2"}},[t("li",[t("p",[this._v("切换到项目目录 xxx 下，执行命令 npm run serve 即可启动项目")])]),this._v(" "),t("li",[t("p",[this._v("vue add xxx 可以安装插件（只有使用过vue封装且存在的才会安装成功），但可能会改变你已有的代码，虽然智能，慎用")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"项目配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 项目配置")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",[t("li",[this._v("vue-cli 3.x 版本和 2.x 相差很大，所有的配置都通过一个配置文件进行，在根目录添加 vue.config.js 文件，进行项目配置：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// 用于做相应的合并处理\nconst merge = require('webpack-merge');\n\nconsole.log(process.env); // development（在终端输出）\n\nmodule.exports = {\n    //baseUrl: 'vue',// 改变 webpack 配置文件中 output 的 publicPath 项\n    outputDir: 'dist', // 输出文件夹，默认dist\n    productionSourceMap: true, // 该配置项用于设置是否为生产环境构建生成 source map\n\n    // config 参数为已经解析好的 webpack 配置\n    chainWebpack: config => {\n        config.module\n            .rule('images')\n            .use('url-loader')\n            .tap(options =>\n                merge(options, {\n                  limit: 5120,\n                })\n            )\n    },\n\n    // 除了上述使用 chainWebpack 来改变 webpack 内部配置外，我们还可以使用 configureWebpack 来进行修改，\n    // 两者的不同点在于 chainWebpack 是链式修改，而 configureWebpack 更倾向于整体替换和修改。示例代码如下：\n    // configureWebpack 可以直接是一个对象，也可以是一个函数\n    // configureWebpack: config => {\n    //     // config.plugins = []; // 这样会直接将 plugins 置空\n    //     // 使用 return 一个对象会通过 webpack-merge 进行合并，plugins 不会置空\n    //     return {\n    //         plugins: []\n    //     }\n    // },\n\n    // devServer: { //这里面的某一配置项不受支持\n    //     open: true, // 是否自动打开浏览器页面\n    //     host: '127.0.0.1', // 指定使用一个 host。默认是 localhost\n    //     port: 8080, // 端口地址\n    //     https: false, // 使用https提供服务\n    //     proxy: null, // string | Object 代理设置\n    // }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("你可以在项目目录下运行 vue inspect 来查看你修改后的 webpack 完整配置，当然你也可以缩小审查范围，比如：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("# 只查看 plugins 的内容\nvue inspect plugins\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"2"}},[t("li",[this._v("各种环境配置")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("a. 开发环境（开发阶段，本地开发版本，一般会使用一些调试工具或额外的辅助功能）"),t("br"),this._v("\nb. 测试环境（测试阶段，上线前版本，除了一些 bug 的修复，基本不会和上线版本有很大差别）"),t("br"),this._v("\nc. 生产环境（上线阶段，正式对外发布的版本，一般会进行优化，关掉错误报告）")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v(".env                # 在所有的环境中被载入"),t("br"),this._v("\n.env.local          # 在所有的环境中被载入，但会被 git 忽略"),t("br"),this._v("\n.env.[mode]         # 只在指定的模式中被载入"),t("br"),this._v("\n.env.[mode].local   # 只在指定的模式中被载入，但会被 git 忽略"),t("br")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("NODE_ENV=stage\nVUE_APP_TITLE=stage mode\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("// vue.config.js\nconsole.log(process.env.NODE_ENV); // development（在终端输出）\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('"scripts": {\n    "serve": "vue-cli-service serve --mode stage",\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"3"}},[t("li",[this._v("环境注入\n在环境配置文件中定义的变量，在 vue.config.js 中，可以通过 process.env 获得，但是到了真正的业务代码js中，只能获取环境配置文件中以 VUE_APP_ 开头的变量（NODE_ENV 和 BASE_URL 这两个特殊变量除外）\n例：\n.env.stage.local 文件中写入：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("NODE_ENV=stage2\nVUE_APP_TITLE=stage mode2\nNAME=vue\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("{\n    ...\n\n    npm_package_dependencies_vue_router: '^3.0.1',\n    npm_config_version_tag_prefix: 'v',\n    npm_node_execpath: '/usr/local/bin/node',\n    NODE_ENV: 'stage2', //来自配置文件的变量\n    VUE_APP_TITLE: 'stage mode2', //来自配置文件的变量\n    NAME: 'vue', //来自配置文件的变量\n    BABEL_ENV: 'development',\n    \n    ...\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n    "BASE_URL": "/vue/",\n    "NODE_ENV": "stage2",\n    "VUE_APP_TITLE": "stage mode2"\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"4"}},[t("li",[this._v("额外配置\n.env 这样的配置文件中的参数目前只支持静态值，无法使用动态参数，在某些情况下无法实现特定需求，\n这时候我们可以在根目录下新建 config 文件夹用于存放一些额外的配置文件。")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("/* 配置文件 index.js */\n// 公共变量\nconst com = {\n    IP: JSON.stringify('xxx')\n};\n\nmodule.exports = {\n    // 开发环境变量\n    dev: {\n    \tenv: {\n            TYPE: JSON.stringify('dev'),\n            ...com // es6语法\n    \t}\n    },\n    \n    // 生产环境变量\n    build: {\n    \tenv: {\n            TYPE: JSON.stringify('prod'),\n            ...com\n    \t}\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("/* vue.config.js */\n// 用于做相应的 merge 处理\nconst merge = require('webpack-merge');\n\n// 根据环境判断使用哪份配置\nconst configs = require('./config');\nconst cfg = process.env.NODE_ENV === 'production' ? configs.build.env : configs.dev.env;\n\nmodule.exports = {\n    ...\n    \n    chainWebpack: config => {\n        config.plugin('define')\n            .tap(args => {\n                // 把动态配置合并到process.env\n                let name = 'process.env';\n                \n                // 使用 merge 合并，保证原始值不变\n                args[0][name] = merge(args[0][name], cfg);\n    \n                return args\n            })\n    },\n\t\n    ...\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('console.log(process.env)\n{\n    "NODE_ENV": "stage2",\n    "VUE_APP_TITLE": "stage mode2",\n    "BASE_URL": "/vue/",\n    "TYPE": "dev",\n    "IP": "xxx"\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("/* router.js */\nimport Vue from 'vue'\nimport Router from 'vue-router'\n\n// 引入 Home 组件\nconst Home = resolve => {\n    require.ensure(['./views/Home.vue'], () => {\n        resolve(require('./views/Home.vue'))\n    })\n}\n\n// 引入 About 组件\nconst About = resolve => {\n    require.ensure(['./views/About.vue'], () => {\n        resolve(require('./views/About.vue'))\n    })\n}\n\nVue.use(Router)\n\nlet base = `${process.env.BASE_URL}` // 动态获取二级目录\n\nexport default new Router({\n    mode: 'history',\n    base: base,\n    routes: [{\n        path: '/',\n        name: 'home',\n        component: Home\n    }, {\n        path: '/about',\n        name: 'about',\n        component: About\n    }]\n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"6"}},[t("li",[this._v("更好的store层级划分")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("└── store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── actions.js        # 根级别的 action\n    ├── mutations.js      # 根级别的 mutation\n    └── modules\n        ├── moduleA.js    # A模块\n        └── moduleB.js    # B模块\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const moduleA = {\n    state: { \n        text: 'hello'\n    },\n    mutations: {\n        addText (state, txt) {\n            // 这里的 `state` 对象是模块的局部状态\n            state.text += txt\n        }\n    },\n    \n    actions: {\n        setText ({ commit }) {\n            commit('addText', ' world')\n        }\n    },\n\n    getters: {\n        getText (state) {\n            return state.text + '!'\n        }\n    }\n}\n\nexport default moduleA\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import Vue from 'vue'\nimport Vuex from 'vuex'\nimport moduleA from './modules/moduleA'\nimport moduleB from './modules/moduleB'\nimport { mutations } from './mutations'\nimport actions from './actions'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n    state: {\n        groups: [1]\n    },\n    modules: {\n        moduleA, // 引入 A 模块\n        moduleB, // 引入 B 模块\n    },\n    actions, // 根级别的 action\n    mutations, // 根级别的 mutations\n    \n    // 根级别的 getters\n    getters: {\n        getGroups (state) {\n            return state.groups\n        }\n    }   \n})\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ol",{attrs:{start:"7"}},[t("li",[this._v("如果需要去掉eslint检查，操作如下\n在 package.json 文件中，找到 eslintConfig ，如下")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n    "root": true,\n    "env": {\n      "node": true\n    },\n    "extends": [\n      "plugin:vue/essential",\n      "eslint:recommended" // eslint配置，去掉即可\n    ],\n    "rules": {},\n    "parserOptions": {\n      "parser": "babel-eslint"\n    }\n},\n')])])])}],!1,null,null,null);r.options.__file="vuecli3.md";t.default=r.exports}}]);